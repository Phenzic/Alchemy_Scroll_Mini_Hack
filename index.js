const express = require('express');
const ethers = require('ethers');
const axios = require('axios');

require("dotenv")

const app = express();
app.use(express.json());

const ALCHEMY_URL = `https://scroll-mainnet.g.alchemy.com/v2/${process.env.ALCHEMY_API_KEY}`;
const DEPLOYER_PRIVATE_KEY = ""; // Replace with your actual private key

const provider = new ethers.providers.JsonRpcProvider(ALCHEMY_URL);
const wallet = new ethers.Wallet(DEPLOYER_PRIVATE_KEY, provider);

const ERC20_ABI = [
  "constructor(string memory name_, string memory symbol_, uint256 initialSupply)",
  "function name() public view returns (string)",
  "function symbol() public view returns (string)",
  "function decimals() public view returns (uint8)",
  "function totalSupply() public view returns (uint256)",
  "function balanceOf(address account) public view returns (uint256)",
  "function transfer(address recipient, uint256 amount) public returns (bool)",
  "function allowance(address owner, address spender) public view returns (uint256)",
  "function approve(address spender, uint256 amount) public returns (bool)",
  "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)",
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "event Approval(address indexed owner, address indexed spender, uint256 value)"
];

const ERC20_BYTECODE = "0x60806040523480156200001157600080fd5b5060405162000c3838038062000c38833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b506040526020908101518551909350620001b892506003918601906200022f565b508151620001ce9060049060208501906200022f565b506005805460ff191660121790556200020582846200020f60201b60201c565b50505062000323565b6001600160a01b0382166200026c5760405162461bcd60e51b815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f206164647265737300815250602001915050604051809103906200026790620002f1565b60405180910390fd5b620002803382620002f460201b60201c565b620002a381600254620002f860201b62000a5b1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002d991839062000a5b620002f8821b17901c565b6001600160a01b0390921660009081526020818152604090912055565b6110bb565b805182549160019283912091829055016003555050565b600060208284031215620002dd57600080fd5b80516001600160a01b0381168114620002f557600080fd5b9392505050565b805182815290939020600190910190910155565b610d8880620003336000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461014f57806395d89b4114610175578063a457c2d71461017d578063a9059cbb146101a9578063dd62ed3e146101d5576100a9565b806306fdde03146100ae578063095ea7b3146100f457806318160ddd1461011e57806323b872dd14610138578063313ce56714610176575b600080fd5b6100b6610203565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101206004803603604081101561010a57600080fd5b506001600160a01b038135169060200135610299565b604080519115158252519081900360200190f35b6101266102b6565b60408051918252519081900360200190f35b6101206004803603606081101561014e57600080fd5b506001600160a01b038135811691602081013590911690604001356102bc565b6101266004803603602081101561016557600080fd5b50356001600160a01b0316610343565b61017b61035e565b6040805160ff9092168252519081900360200190f35b6100b6610367565b6101206004803603604081101561019357600080fd5b506001600160a01b0381351690602001356103c8565b610120600480360360408110156101bf57600080fd5b506001600160a01b038135169060200135610430565b610126600480360360408110156101eb57600080fd5b506001600160a01b0381358116916020013516610444565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b505050505090505b90565b60006102ad6102a661046f565b8484610473565b50600192915050565b60025490565b60006102c984848461055f565b610339846102d561046f565b61033485604051806060016040528060288152602001610cff602891396001600160a01b038a1660009081526001602052604081209061031361046f565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6106ba16565b610473565b5060019392505050565b6001600160a01b031660009081526020819052604090205490565b60055460ff1690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156102895780601f1061025e57610100808354040283529160200191610289565b60006102ad6103d561046f565b8461033485604051806060016040528060258152602001610d20602591396001600160a01b038816600090815260016020526040812090610338610313610751565b60006102ad61043d61046f565b848461055f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661047957600080fd5b6001600160a01b03821661048c57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661057257600080fd5b6001600160a01b03821661058557600080fd5b61058e838261075e565b6001600160a01b038316600090815260208190526040902054610617908263ffffffff6107fb16565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461064c908263ffffffff6108a116565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107085781810151838201526020016106f0565b50505050905090810190601f1680156107355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b3390565b600061076e838361055f565b6001600160a01b0380851660009081526001602090815260408083209387168352929052205460001981146107f557826107f582826107fb565b50505050565b6000828211156108575760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008282018381101561089a5760408051600160e51b62461bcd028152602060048201526011602482015270092dcecc2d8d2c840e8eae0d8ca89a5b607a1b604482015290519081900360640190fd5b9392505050565b600082820183811015610361576040805160e560020a62461bcd02815260206004820152601660248201527f536166654d6174683a206164642077726f70732060300000000000000000000060448201529051908190036064019056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f45524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723058207b5ecd8e89fd57b58f5a90f5935b337f5c9cbc3f56ba9c9d56314dabd96a15b764736f6c634300050a0032";

app.post('/deploy-erc20', async (req, res) => {
  try {
    const { name, symbol, initialSupply, deployerFee } = req.body;
    
    // Check if the user has paid the required fee
    // This is where you'd implement your payment logic
    
    const factory = new ethers.ContractFactory(ERC20_ABI, ERC20_BYTECODE, wallet);
    const contract = await factory.deploy(name, symbol, ethers.utils.parseEther(initialSupply.toString()));
    
    await contract.deployed();
    
    res.json({
      success: true,
      contractAddress: contract.address,
      transactionHash: contract.deployTransaction.hash
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/contract/:address', async (req, res) => {
  try {
    const { address } = req.params;
    const contract = new ethers.Contract(address, ERC20_ABI, provider);
    
    const [name, symbol, totalSupply] = await Promise.all([
      contract.name(),
      contract.symbol(),
      contract.totalSupply()
    ]);
    
    res.json({
      name,
      symbol,
      totalSupply: ethers.utils.formatEther(totalSupply)
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});